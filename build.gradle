plugins {
	id 'fabric-loom' version '1.6.11'
	id 'maven-publish'
}

version = "${project.mod_version}+${minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name = "QuiltMC"
		url = "https://maven.quiltmc.org/repository/release"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
        url = 'https://maven.cafeteria.dev'
        content {
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
	maven {
		url = "https://maven.shedaniel.me/"
	}
	maven {
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Jamie's White Shirt"
		url = "https://maven.jamieswhiteshirt.com/libs-release"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
		url = "https://masa.dy.fi/maven"
	}
	maven {
		name = "Nexus Repository Manager"
		url = 'https://oss.sonatype.org/content/repositories/snapshots'
	}
	maven {
		url = 'https://jitpack.io'
	}
}

loom {
    splitEnvironmentSourceSets()

	accessWidenerPath = file("src/main/resources/voile.accesswidener")

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath

			compileClasspath += client.compileClasspath
			runtimeClasspath += client.runtimeClasspath
		}
	}

	mods {
		"voile" {
			//noinspection GroovyAssignabilityCheck
			sourceSet sourceSets.main
			//noinspection GroovyAssignabilityCheck
			sourceSet sourceSets.client
		}
		testmod {
			//noinspection GroovyAssignabilityCheck
			sourceSet sourceSets.testmod
		}
	}

	runs {
		testmodClient {
			client()
			name = "Test Mod Client"
			//noinspection GroovyAssignabilityCheck
			source sourceSets.testmod
		}
		testmodServer {
			server()
			name = "Test Mod Server"
			//noinspection GroovyAssignabilityCheck
			source sourceSets.testmod
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Apoli
	modApi "com.github.apace100:apoli:${project.apoli_version}"

	// Pehkui
	modImplementation(include("com.github.Virtuoel:Pehkui:${project.pehkui_version}", {
		exclude group: "net.fabricmc.fabric-api"
	}))

	// Impersonate
	// Using my 1.20.2 fork until Origins updates to 1.20.4 or higher
	modImplementation(include("com.github.Maxmani:Impersonate:${project.impersonate_version}"))
	include "me.lucko:fabric-permissions-api:${project.fpa_version}"

	// Origins (for test mod)
	modLocalRuntime "com.github.apace100:origins-fabric:${project.origins_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	//noinspection GroovyAssignabilityCheck, GroovyAccessibility
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("COPYING") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
	from("COPYING.LESSER") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		//noinspection GroovyAssignabilityCheck
		mavenJava(MavenPublication) {
			//noinspection GroovyAssignabilityCheck
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		mavenLocal()
	}
}